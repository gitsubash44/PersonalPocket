@page "/debtmanagement"

@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.IO
@using System.Text.Json <!-- Imports necessary namespaces for data handling, validation, and serialization -->


<div class="container mt-5">
    <!-- Main Container -->

    <h2 class="text-center mb-4">Debt Management</h2>

    <!-- Filtering Section -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <!-- Search Input -->
        <input type="text" class="form-control w-25" placeholder="Search..." @bind="searchQuery" />
        
        <!-- Sort Options Dropdown -->
        <select class="form-select w-25" @bind="sortOption">
            <option value="">Sort By</option>
            <option value="source">Source</option>
            <option value="amount">Amount</option>
            <option value="duedate">Due Date</option>
            <option value="overdue">Over Due</option>
        </select>
    </div>

    <!-- Debt Listing Section -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <!-- Add Debt Modal Trigger -->
            <h5 class="mb-0">Debts Overview</h5>
            <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#debtModal">Add Debt</button>
        </div>
        <div class="card-body">
            @if (filteredDebts.Any())
            {
                <!-- Display debts in a table -->
                <table class="table table-bordered table-hover">
                    <!-- Table Headers -->
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Source</th>
                            <th>Amount</th>
                            <th>Due Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var debt in paginatedDebts)
                        {
                            <!-- Highlight rows based on debt status -->
                            <tr class="@(debt.IsCleared ? "cleared-debt" : debt.DueDate < DateTime.Now ? "overdue-debt" : "pending-debt")">
                                <td>@debt.Id</td>
                                <td>@debt.Source</td>
                                <td>@debt.Amount.ToString("C")</td>
                                <td>@debt.DueDate.ToShortDateString()</td>
                                <td>
                                    <!-- Status Badges -->
                                    @if (debt.IsCleared)
                                    {
                                        <span class="badge bg-success">Cleared</span>
                                    }
                                    else if (debt.DueDate < DateTime.Now)
                                    {
                                        <span class="badge bg-danger">Overdue</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">Pending</span>
                                    }
                                </td>
                                <td>
                                    <!-- Action Buttons -->
                                    @if (!debt.IsCleared)
                                    {
                                        <button class="btn btn-success btn-sm" @onclick="() => ClearDebt(debt.Id)">Clear</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm" disabled>Cleared</button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Pagination Controls -->
                <div class="d-flex justify-content-center">
                    <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(!CanGoBack)">Previous</button>
                    <button class="btn btn-outline-primary ms-2" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
                </div>
            }
            else
            {
                <!-- Message when no debts are found -->
                <p class="text-center">No debts found. Add one to get started.</p>
            }
        </div>
    </div>

    <!-- Modal for Adding Debt -->
    <div class="modal fade" id="debtModal" tabindex="-1" aria-labelledby="debtModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <!-- Modal Title -->
                    <h5 class="modal-title" id="debtModalLabel">Add Debt</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Form for Adding Debt -->
                    <EditForm Model="newDebt" OnValidSubmit="HandleAddDebt">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Debt Source Field -->
                        <div class="mb-3">
                            <label for="debtSource" class="form-label">Source of Debt</label>
                            <InputText id="debtSource" class="form-control" @bind-Value="newDebt.Source" />
                            <ValidationMessage For="@(() => newDebt.Source)" />
                        </div>

                        <!-- Debt Amount Field -->
                        <div class="mb-3">
                            <label for="debtAmount" class="form-label">Amount</label>
                            <InputNumber id="debtAmount" class="form-control" @bind-Value="newDebt.Amount" />
                            <ValidationMessage For="@(() => newDebt.Amount)" />
                        </div>

                        <!-- Debt Due Date Field -->
                        <div class="mb-3">
                            <label for="debtDueDate" class="form-label">Due Date</label>
                            <InputDate id="debtDueDate" class="form-control" @bind-Value="newDebt.DueDate" />
                            <ValidationMessage For="@(() => newDebt.DueDate)" />
                        </div>

                        <!-- Submit Button -->
                        <div class="d-flex justify-content-end">
                            <button type="submit" class="btn btn-primary">Add Debt</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>


@code {
    private List<Debt> debts = new();
    private List<Debt> filteredDebts
    {
        get
        {
            return debts
        .Where(d => string.IsNullOrWhiteSpace(searchQuery) || d.Source.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .OrderBy(d => GetSortKey(d)) // Explicitly define sorting logic
        .ToList();
        }
    }

    private List<Debt> paginatedDebts => filteredDebts.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    private Debt newDebt = new Debt();
    private int currentPage = 1;
    private const int pageSize = 5;

    private bool CanGoBack => currentPage > 1;
    private bool CanGoNext => currentPage < (filteredDebts.Count / pageSize) + (filteredDebts.Count % pageSize == 0 ? 0 : 1);

    private string searchQuery = string.Empty;
    private string sortOption = string.Empty;


    // This method returns the sorting key based on the selected sort option
    private object GetSortKey(Debt debt)
    {
        return sortOption switch
        {
            "source" => debt.Source,
            "amount" => debt.Amount,
            "duedate" => debt.DueDate,
            "overdue" => debt.DueDate < DateTime.Now,
            _ => debt.Id
        };
    }

    protected override void OnInitialized()
    {
        debts = LoadDebtsFromFile();
    }

    private void HandleAddDebt()
    {
        debts.Add(newDebt);
        SaveDebtsToFile();
        newDebt = new Debt();
        StateHasChanged(); // Ensure UI updates after debt is added
    }

    private void ClearDebt(int id)
    {
        var debt = debts.FirstOrDefault(d => d.Id == id);
        if (debt != null)
        {
            debt.IsCleared = true;
            SaveDebtsToFile();
            StateHasChanged(); // Ensure UI updates after clearing the debt
        }
    }

    private void SaveDebtsToFile()
    {
        var json = JsonSerializer.Serialize(debts);
        var path = GetFilePath();
        File.WriteAllText(path, json);
    }

    private List<Debt> LoadDebtsFromFile()
    {
        var path = GetFilePath();
        if (File.Exists(path))
        {
            var json = File.ReadAllText(path);
            return JsonSerializer.Deserialize<List<Debt>>(json) ?? new List<Debt>();
        }
        return new List<Debt>();
    }

    private string GetFilePath()
    {
        var folder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        var path = Path.Combine(folder, "debtmanagement", "debts.json");
        Directory.CreateDirectory(Path.GetDirectoryName(path));
        return path;
    }

    private void PreviousPage() { if (CanGoBack) currentPage--; }
    private void NextPage() { if (CanGoNext) currentPage++; }

    public class Debt
    {
        public int Id { get; set; }
        [Required] public string Source { get; set; }
        [Range(0.01, double.MaxValue, ErrorMessage = "Amount must be greater than zero.")] public decimal Amount { get; set; }
        [Required] public DateTime DueDate { get; set; }
        public bool IsCleared { get; set; }
    }
}
