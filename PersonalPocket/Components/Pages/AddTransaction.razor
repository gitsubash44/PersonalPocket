@page "/addtransaction"
@using System.IO
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

<div class="card mb-4">
    <div class="card-header bg-primary text-white">Add Transaction</div>
    <div class="card-body">
        <EditForm Model="transaction" OnValidSubmit="HandleAddTransaction">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-6">
                    <label for="transactionTitle" class="form-label">Title</label>
                    <InputText id="transactionTitle" class="form-control" @bind-Value="transaction.Title" placeholder="e.g., Salary, Grocery" />
                    <ValidationMessage For="@(() => transaction.Title)" />
                </div>
                <div class="col-md-6">
                    <label for="transactionType" class="form-label">Type</label>
                    <InputSelect id="transactionType" class="form-select" @bind-Value="transaction.Type">
                        <option value="" disabled selected>Choose...</option>
                        <option value="credit">Credit</option>
                        <option value="debit">Debit</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => transaction.Type)" />
                </div>
                <div class="col-md-6">
                    <label for="transactionAmount" class="form-label">Amount</label>
                    <InputNumber id="transactionAmount" class="form-control" @bind-Value="transaction.Amount" placeholder="e.g., 1000" />
                    <ValidationMessage For="@(() => transaction.Amount)" />
                </div>
                <div class="col-md-6">
                    <label for="transactionDate" class="form-label">Date</label>
                    <InputDate id="transactionDate" class="form-control" @bind-Value="transaction.Date" />
                    <ValidationMessage For="@(() => transaction.Date)" />
                </div>
                <div class="col-md-6">
                    <label for="transactionTags" class="form-label">Tags</label>
                    <InputSelect id="transactionTags" class="form-select" @bind-Value="transaction.Tag">
                        <option value="" disabled selected>Choose...</option>
                        <option value="Yearly">Yearly</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Food">Food</option>
                        <option value="Drinks">Drinks</option>
                        <option value="Clothes">Clothes</option>
                        <option value="Gadgets">Gadgets</option>
                        <option value="Fuel">Fuel</option>
                        <option value="Rent">Rent</option>
                        <option value="Others">Others</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => transaction.Tag)" />
                </div>
                <div class="col-md-6">
                    <label for="transactionNotes" class="form-label">Notes</label>
                    <textarea id="transactionNotes" class="form-control" @bind="transaction.Notes" rows="2" placeholder="Optional notes"></textarea>
                    <ValidationMessage For="@(() => transaction.Notes)" />
                </div>
            </div>
            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Add Transaction</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private TransactionModel transaction = new TransactionModel();
    private List<TransactionModel> transactions = new List<TransactionModel>();

    private async Task HandleAddTransaction()
    {
        // Validation example for beginners
        if (string.IsNullOrWhiteSpace(transaction.Type) || transaction.Amount <= 0)
        {
            return; // Exit early if the form is invalid
        }

        transactions.Add(transaction);
        transaction = new TransactionModel(); // Reset form after adding

        await SaveTransactionsToFile();
    }

    private async Task SaveTransactionsToFile()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "transactions.json");

        // Ensure directory exists before writing to the file
        var directory = Path.GetDirectoryName(path);
        if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        var json = JsonSerializer.Serialize(transactions);
        await File.WriteAllTextAsync(path, json); // Use async file writing
    }

    protected override async Task OnInitializedAsync()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "transactions.json");
        if (File.Exists(path))
        {
            var json = await File.ReadAllTextAsync(path); // Use async file reading
            transactions = JsonSerializer.Deserialize<List<TransactionModel>>(json) ?? new List<TransactionModel>();
        }
    }
}
