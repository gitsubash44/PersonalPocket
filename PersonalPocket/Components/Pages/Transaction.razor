@page "/transaction"
@using System.IO
@using System.Text.Json
@using System.Linq

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transaction Tracking</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<div class="container my-5">
    <h1 class="text-center mb-4">Transaction Tracking</h1>

    <!-- Summary Section -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Total Cash In</h5>
                    <p class="card-text" id="totalCashIn">@TotalCashIn.ToString("C")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <h5 class="card-title">Total Cash Out</h5>
                    <p class="card-text" id="totalCashOut">@TotalCashOut.ToString("C")</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <h5 class="card-title">Current Balance</h5>
                    <p class="card-text" id="currentBalance">@CurrentBalance.ToString("F2")</p>
                </div>
            </div>
        </div>

    </div>

    <!-- Toggle Buttons -->
    <div class="d-flex justify-content-between mb-4">
        <NavLink class="btn btn-primary" href="/addtransaction">
            Add Transaction
        </NavLink>

        <NavLink class="btn btn-primary" href="/filtertransaction">
            Filter & Sort Transactions
        </NavLink>
    </div>

    <!-- Transaction List Section -->
    <div class="card">
        <div class="card-header bg-dark text-white">Transaction List</div>

        <div class="card-body">
            <div class="table-responsive">
                @if (transactions == null || transactions.Count == 0)
                {
                    <p>No transactions available.</p>
                }
                else
                {
                    <table class="table table-striped">
                        <thead class="table-dark">
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Title</th>
                                <th scope="col">Type</th>
                                <th scope="col">Amount</th>
                                <th scope="col">Date</th>
                                <th scope="col">Tags</th>
                                <th scope="col">Notes</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in transactions.Select((value, index) => new { Value = value, Index = index }))
                            {
                                <tr class="@(transaction.Value.Type.ToLower() == "debit" ? "table-warning" : "")">
                                    <td>@transaction.Index</td>
                                    <td>@transaction.Value.Title</td>
                                    <td>
                                        <span class="badge @(transaction.Value.Type.ToLower() == "credit" ? "bg-success" : "bg-danger")">
                                            @transaction.Value.Type
                                        </span>
                                    </td>
                                    <td>@transaction.Value.Amount.ToString("C")</td>
                                    <td>@transaction.Value.Date.ToShortDateString()</td>
                                    <td>@transaction.Value.Tag</td>
                                    <td>@transaction.Value.Notes</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTransaction(transaction.Index)">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private decimal TotalCashIn { get; set; } = 0;
    private decimal TotalCashOut { get; set; } = 0;
    private decimal CurrentBalance { get; set; } = 0;
    private List<TransactionModel> transactions = new List<TransactionModel>();
    private List<Debt> debts = new List<Debt>();

    protected override void OnInitialized()
    {
        var transactionPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "transactions.json");
        var debtPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "debtmanagement", "debts.json");

        // Load Transactions
        if (File.Exists(transactionPath))
        {
            var json = File.ReadAllText(transactionPath);
            transactions = JsonSerializer.Deserialize<List<TransactionModel>>(json) ?? new List<TransactionModel>();
        }

        // Load Debts
        if (File.Exists(debtPath))
        {
            var json = File.ReadAllText(debtPath);
            debts = JsonSerializer.Deserialize<List<Debt>>(json) ?? new List<Debt>();
        }

        CalculateSummary();
    }

    private void CalculateSummary()
    {
        TotalCashIn = transactions
            .Where(t => t.Type.Equals("credit", StringComparison.OrdinalIgnoreCase))
            .Sum(t => t.Amount);

        TotalCashOut = transactions
            .Where(t => t.Type.Equals("debit", StringComparison.OrdinalIgnoreCase))
            .Sum(t => t.Amount);

        // Calculate pending debts (where IsCleared is false)
        var pendingDebts = debts.Where(d => !d.IsCleared).Sum(d => d.Amount);

        // Update the current balance
        CurrentBalance = TotalCashIn - TotalCashOut + pendingDebts;
    }

    private void DeleteTransaction(int index)
    {
        // Remove the transaction from the list
        if (index >= 0 && index < transactions.Count)
        {
            transactions.RemoveAt(index);
            SaveTransactions();
        }
    }

    private void SaveTransactions()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "transactions.json");
        var json = JsonSerializer.Serialize(transactions);
        File.WriteAllText(path, json);
    }
}
